generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  email             String              @unique
  password          String?
  usertype          String?
  firstName         String?
  lastName          String?
  gender            String?
  address           String?
  dateOfBirth       DateTime?
  phoneNumber       String?
  dietaryPreference DietaryPreference?
  cartItems         CartItem[]          // Define the relation to CartItem
  orders            Order[]
}

model Log {
  id        String   @id @map("_id") @db.ObjectId
  action    String
  email     String
  timestamp DateTime @default(now())
}

model DietaryPreference {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @unique
  vegetarian        Boolean @default(false)
  vegan             Boolean @default(false)
  omnivore          Boolean @default(false)
  halal             Boolean @default(false)
  kosher            Boolean @default(false)
  glutenFree        Boolean @default(false)
  lactoseFree       Boolean @default(false)
  nutAllergy        Boolean @default(false)
  otherRestrictions String?
  user              User    @relation(fields: [userId], references: [id])
}

model FoodItem {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  description         String?
  price               Float
  size                String?     // Added size field here
  category            String?     // Assuming simple string categories
  dietaryRestrictions String[]    // Array of strings
  imageUrl            String?
  cartItems           CartItem[]  // Define the relation to CartItem
  orderItems          OrderItem[]
  @@unique([name, size], name: "name_size") // Ensures uniqueness for combinations of name and size
}

model CartItem {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String
  itemId   String
  quantity Int
  user     User     @relation(fields: [userId], references: [id])
  foodItem FoodItem @relation(fields: [itemId], references: [id]) // Define the relation to FoodItem
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  orderItems  OrderItem[] 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
}

model OrderItem {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId  String
  itemId   String
  quantity Int
  foodItem FoodItem @relation(fields: [itemId], references: [id])
  order    Order    @relation(fields: [orderId], references: [id])
}
